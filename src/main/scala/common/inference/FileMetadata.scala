package common.inference

import common.inference.Quoting.Quoting

/**
  * lineTerminator specifies the character sequence which should
  *   terminate rows.
  *
  * quoting controls when quotes should be generated by the writer.
  *   It can take on any of the following module constants:
  *
  *   Quoting.Minimal means only when required, for example, when a
  *     field contains either the quotechar or the delimiter
  *   Quoting.All means that quotes are always placed around fields.
  *   Quoting.Nonnumeric means that quotes are always placed around
  *     fields which do not parse as integers or floating point
  *     numbers.
  *   Quoting.None means that quotes are never placed around fields.
  *
  * doubleQuoted controls the handling of quotes inside fields.  When
  *   True, two consecutive quotes are interpreted as one during read,
  *   and when writing, each quote character embedded in the data is
  *   written as two quotes
  *
  * delimiter specifies a string to use as the column separator.
  *
  * quoteChar specifies a one-character string to use as the
  *   quoting character.  It defaults to '"'.
  *
  * skipInitialSpace specifies how to interpret whitespace which
  *   immediately follows a delimiter.  It defaults to False, which
  *   means that whitespace immediately following a delimiter is part
  *   of the following field.
  *
  * escapeChar specifies a one-character string used to escape
  *   the delimiter when quoting is set to QUOTE_NONE.
  *
  * Created by markmo on 12/03/2016.
  */
case class FileMetadata(textQualifier: String,
                        doubleQuoted: Boolean,
                        columnDelimiter: String,
                        skipInitialSpace: Boolean,
                        header: Boolean,
                        lineTerminator: String,
                        quoting: Quoting,
                        escapeCharacter: Char,
                        inferred: Boolean
                       )

object FileMetadata {

  def apply(): FileMetadata = FileMetadata(
    textQualifier = "\"",
    doubleQuoted = false,
    columnDelimiter = "",
    skipInitialSpace = false,
    header = false,
    lineTerminator = "\\r\\n",
    quoting = Quoting.Minimal,
    escapeCharacter = '\\',
    inferred = false
  )

  def apply(textQualifier: String,
            doubleQuoted: Boolean,
            columnDelimited: String,
            skipInitialSpace: Boolean
           ): FileMetadata = FileMetadata(
    textQualifier,
    doubleQuoted,
    columnDelimited,
    skipInitialSpace,
    header = false,
    lineTerminator = "\\r\\n",
    quoting = Quoting.Minimal,
    escapeCharacter = '\\',
    inferred = true
  )

  def apply(columnDelimited: String,
            skipInitialSpace: Boolean
           ): FileMetadata = FileMetadata(
    textQualifier = "\"",
    doubleQuoted = false,
    columnDelimiter = columnDelimited,
    skipInitialSpace = skipInitialSpace,
    header = false,
    lineTerminator = "\\r\\n",
    quoting = Quoting.Minimal,
    escapeCharacter = '\\',
    inferred = true
  )
}

object Quoting extends Enumeration {
  type Quoting = Value
  val Minimal, All, Nonnumeric, None = Value
}